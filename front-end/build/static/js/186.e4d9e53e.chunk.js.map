{"version":3,"file":"static/js/186.e4d9e53e.chunk.js","mappings":"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","sources":["album/components/Image/Uploading/ImageInfo.js","album/components/Image/UploadingBox.js","album/pages/Image/ImagesUploading.js"],"sourcesContent":["import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { setLoadImageCount, setUploadingImageInfo } from \"../../../imageSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nexport default function ImageInfo(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  // console.log(\"ImageInfo(props) \", props);\r\n  const userInfo = useSelector(\r\n    (state) => state.sharedSlice.currentUserInformation\r\n  );\r\n  const imageInputInfor = useSelector(\r\n    (state) => state.imageSlice.uploadingImageInfo\r\n  );\r\n  //TODO: fix to cover more case here\r\n  const convertToComputerSize = (size) => {\r\n    return Math.round((size * 100) / 1024) / 100 + \"KB\";\r\n  };\r\n  // console.log(\"imageInputInfor\", imageInputInfor);\r\n  return (\r\n    <div className={`${props.isShow ? \"block\" : \"hidden\"}`}>\r\n      <section className=\"input-area\">\r\n        {props.listImageLength !== 0 && (\r\n          <div className=\"img-manage\">\r\n            <p className=\"img-index\">{`${props.index + 1}/${\r\n              props.listImageLength\r\n            }`}</p>\r\n            <p\r\n              className=\"delete-icon noselect\"\r\n              onClick={() => {\r\n                props.deleteCurrentImageFromQueue(props.index);\r\n              }}\r\n            >\r\n              Delete\r\n            </p>\r\n          </div>\r\n        )}\r\n\r\n        <input\r\n          type=\"text\"\r\n          className=\"title\"\r\n          placeholder=\"Nhập tiêu đề\"\r\n          value={imageInputInfor[props.index]?.title}\r\n          onChange={(e) => {\r\n            // console.log(e.target.value);\r\n            dispatch(\r\n              setUploadingImageInfo({\r\n                index: props.index,\r\n                value: {\r\n                  title: e.target.value,\r\n                },\r\n              })\r\n            );\r\n          }}\r\n        />\r\n        <div className=\"user-info\">\r\n          <img src={userInfo?.avatarURL} alt=\"\" className=\"user-avatar\" />\r\n        </div>\r\n        <textarea\r\n          className=\"image-description\"\r\n          rows=\"2\"\r\n          placeholder=\"Nhập mô tả\"\r\n          value={imageInputInfor[props.index]?.description}\r\n          onChange={(e) => {\r\n            dispatch(\r\n              setUploadingImageInfo({\r\n                index: props.index,\r\n                value: {\r\n                  description: e.target.value,\r\n                },\r\n              })\r\n            );\r\n          }}\r\n        ></textarea>\r\n        <input\r\n          type=\"text\"\r\n          className=\"alt-text\"\r\n          placeholder=\"Nhập văn bản thay thế\"\r\n          value={imageInputInfor[props.index]?.alt}\r\n          onChange={(e) => {\r\n            dispatch(\r\n              setUploadingImageInfo({\r\n                index: props.index,\r\n                value: {\r\n                  alt: e.target.value,\r\n                },\r\n              })\r\n            );\r\n          }}\r\n        />\r\n      </section>\r\n      <div className=\"img-attribute\">\r\n        <p className=\"title\">Thông tin file</p>\r\n        <p className=\"file-info-concrete\">\r\n          Size: {convertToComputerSize(props.size)}\r\n          {` (${props.width}x${props.height})`}\r\n        </p>\r\n        <p className=\"file-info-concrete\">Last change: {props.lastModified}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./UploadingBox.scss\";\r\n\r\nimport { BsThreeDots } from \"react-icons/bs\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Line } from \"rc-progress\";\r\n\r\nimport ImageInfo from \"./Uploading/ImageInfo\";\r\nimport { setLoadImageCount, setUploadingImageInfo } from \"../../imageSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport API from \"../../../config/API\";\r\n\r\nexport default function UploadingBox() {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const [listImage, setListImage] = useState([]);\r\n  const [listImageData, setListImageData] = useState([]);\r\n  const [listImageSaveData, setListSaveImage] = useState([]);\r\n  const [listImageWH, setListImageWH] = useState([]);\r\n\r\n  const [albumsInfo, setAlbumsInfo] = useState([]);\r\n  const [currentSelectedImageIndex, setCurrentSelectedImageIndex] =\r\n    useState(-1);\r\n\r\n  const [percentUpload, setPercentUpload] = useState(0);\r\n\r\n  const userInfo = useSelector(\r\n    (state) => state.sharedSlice.currentUserInformation\r\n  );\r\n\r\n  const currentInputValue = useSelector(\r\n    (state) => state.imageSlice.uploadingImageInfo\r\n  );\r\n\r\n  // Get all user albums\r\n  useEffect(() => {\r\n    const getAllUserAlbums = () => {\r\n      axios\r\n        .get(\r\n          API.PREFIX_URL + \"/api/album/get-all-user-album\",\r\n          { params: { username: userInfo.username } },\r\n          { withCredentials: true }\r\n        )\r\n        .then((data) => {\r\n          console.log(\"data\", data);\r\n          setAlbumsInfo(data.data.albumList);\r\n        })\r\n        .catch((err) => {\r\n          console.log(\"err\", err);\r\n        });\r\n    };\r\n    if (userInfo.username) {\r\n      getAllUserAlbums();\r\n    }\r\n  }, [userInfo.username]);\r\n\r\n  const getListImage = (e) => {\r\n    console.log(document.querySelector(\"#img-input\").files);\r\n    const listFile = e.target.files;\r\n\r\n    dispatch(\r\n      setLoadImageCount({\r\n        length: e.target.files.length,\r\n        fromIndex: listImage.length,\r\n      })\r\n    );\r\n\r\n    setListImage((prev) => {\r\n      return [...prev, ...listFile];\r\n    });\r\n    setListSaveImage((prev) => {\r\n      return [...prev, ...listFile];\r\n    });\r\n\r\n    [...listFile].forEach((file) => {\r\n      let reader = new FileReader();\r\n      let imgData = e;\r\n      reader.onload = (e) => {\r\n        imgData = e.target.result;\r\n        setListImageData((prev) => {\r\n          return [...prev, imgData];\r\n        });\r\n      };\r\n      reader.readAsDataURL(file);\r\n    });\r\n  };\r\n\r\n  const callAPISendImages = (uploadImagesData) => {\r\n    axios.defaults.withCredentials = true;\r\n    const config = {\r\n      headers: {\r\n        \"content-type\": \"multipart/form-data\",\r\n      },\r\n      onUploadProgress: function (progressEvent) {\r\n        setPercentUpload(\r\n          Math.round((progressEvent.loaded * 100) / progressEvent.total)\r\n        );\r\n      },\r\n    };\r\n    const url = API.PREFIX_URL + \"/api/image/upload\";\r\n    axios\r\n      .post(url, uploadImagesData, config)\r\n      .then((data) => {\r\n        console.log(\"data\", data);\r\n        navigate(\"/processing\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"err\", err);\r\n      });\r\n  };\r\n\r\n  const uploadListImageHandle = () => {\r\n    if (listImage.length === 0) {\r\n      toast(\"You must choose at least 1 images to upload\");\r\n      return;\r\n    }\r\n\r\n    const uploadImagesData = new FormData();\r\n    listImage.forEach((img) => {\r\n      uploadImagesData.append(\"listImages\", img);\r\n    });\r\n    uploadImagesData.append(\"userID\", userInfo._id);\r\n    currentInputValue.forEach((img) => {\r\n      uploadImagesData.append(\"imgInfo\", JSON.stringify(img));\r\n    });\r\n\r\n    // Logs form data\r\n    for (const pair of uploadImagesData.entries()) {\r\n      console.log(pair[0] + \", \" + pair[1]);\r\n    }\r\n\r\n    // Call api send images\r\n    callAPISendImages(uploadImagesData);\r\n  };\r\n\r\n  const deleteCurrentImageFromQueue = (removeIndex) => {\r\n    //TODO: Xóa các image ra khỏi input file\r\n    setListImageData((prev) =>\r\n      prev.filter((value, index) => index !== removeIndex)\r\n    );\r\n    setListImage((prev) =>\r\n      prev.filter((value, index) => index !== removeIndex)\r\n    );\r\n    setListImageWH((prev) =>\r\n      prev.filter((value, index) => index !== removeIndex)\r\n    );\r\n    listImageSaveData((prev) =>\r\n      prev.filter((value, index) => index !== removeIndex)\r\n    );\r\n    setCurrentSelectedImageIndex(-1);\r\n  };\r\n\r\n  const onLoadImage = (e) => {\r\n    if (\r\n      e.target.src ===\r\n      \"https://upload.wikimedia.org/wikipedia/commons/b/b1/Loading_icon.gif\"\r\n    )\r\n      return;\r\n    if (listImage.length <= listImageWH.length) return;\r\n    setListImageWH((prev) => {\r\n      dispatch(\r\n        setUploadingImageInfo({\r\n          index: prev.length,\r\n          value: {\r\n            storage: listImage[prev.length]?.size,\r\n            dimension: {\r\n              x: e.target.naturalWidth,\r\n              y: e.target.naturalHeight,\r\n            },\r\n            generateTime:\r\n              listImage[prev.length]?.lastModifiedDate.toISOString(),\r\n          },\r\n        })\r\n      );\r\n      return [\r\n        ...prev,\r\n        {\r\n          width: e.target.naturalWidth,\r\n          height: e.target.naturalHeight,\r\n        },\r\n      ];\r\n    });\r\n  };\r\n\r\n  console.log(\"currentInputValue\", currentInputValue);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"uploading-box-container\">\r\n        <div className=\"percent-upload\">\r\n          {\" \"}\r\n          <Line percent={percentUpload} strokeWidth={1} strokeColor=\"cyan\" />\r\n        </div>\r\n        <div className=\"heading\">\r\n          <p className=\"more-icon\">\r\n            <BsThreeDots />\r\n          </p>\r\n          <div className=\"album-selection-container\">\r\n            <select\r\n              className=\"album-selection\"\r\n              name=\"album-selection\"\r\n              id=\"album-upload-selection\"\r\n            >\r\n              <option value={\"none\"}>...</option>\r\n              {albumsInfo.map((value, index) => (\r\n                <option value={value._id} key={index}>\r\n                  {value.albumName}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            <button className=\"select-button\">Select</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"main-content\">\r\n          <div className=\"img-upload-container\">\r\n            {listImage.map((value, index) => {\r\n              return (\r\n                <img\r\n                  src={\r\n                    listImageData[index]\r\n                      ? listImageData[index]\r\n                      : \"https://upload.wikimedia.org/wikipedia/commons/b/b1/Loading_icon.gif\"\r\n                  }\r\n                  key={index}\r\n                  alt=\"\"\r\n                  id={`image-upload-${index}`}\r\n                  className={`img-file-to-upload ${\r\n                    index === currentSelectedImageIndex ? \"selected\" : \"\"\r\n                  }`}\r\n                  onLoad={(e) => {\r\n                    onLoadImage(e);\r\n                  }}\r\n                  onClick={() => {\r\n                    setCurrentSelectedImageIndex(index);\r\n                  }}\r\n                />\r\n              );\r\n            })}\r\n            <label className=\"img-picker\" htmlFor=\"img-input\">\r\n              <img\r\n                className=\"img-add\"\r\n                src=\"https://cdn-icons-png.flaticon.com/512/1091/1091585.png\"\r\n                alt=\"\"\r\n              />\r\n            </label>\r\n            <input\r\n              type=\"file\"\r\n              id=\"img-input\"\r\n              style={{ display: \"none\" }}\r\n              onChange={(e) => {\r\n                getListImage(e);\r\n              }}\r\n              multiple=\"multiple\"\r\n              accept=\"image/gif, image/jpeg, image/png\"\r\n            ></input>\r\n          </div>\r\n          <div className=\"img-upload-infor\">\r\n            {currentSelectedImageIndex !== -1 &&\r\n              listImageSaveData.map((imgData, index) => {\r\n                return (\r\n                  <ImageInfo\r\n                    key={index}\r\n                    isShow={index === currentSelectedImageIndex}\r\n                    index={index}\r\n                    listImageLength={listImage.length}\r\n                    deleteCurrentImageFromQueue={deleteCurrentImageFromQueue}\r\n                    size={listImage[index]?.size}\r\n                    width={listImageWH[index]?.width}\r\n                    height={listImageWH[index]?.height}\r\n                    lastModified={listImage[index]?.lastModifiedDate.toString()}\r\n                  />\r\n                );\r\n              })}\r\n\r\n            <button\r\n              className=\"img-uploader\"\r\n              onClick={() => {\r\n                uploadListImageHandle();\r\n              }}\r\n            >\r\n              Upload\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./ImagesUploading.scss\";\r\n\r\nimport UploadingBox from \"../../components/Image/UploadingBox\";\r\nimport UploadBoxController from \"../../components/Image/UploadBoxController\";\r\n\r\nexport default function ImageUploading() {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-container\">\r\n        <div className=\"content-container\">\r\n          <section className=\"uploading-box-wrapper\">\r\n            <UploadingBox />\r\n          </section>\r\n        </div>\r\n      </div>\r\n      {/* <section className=\"uploading-box-controller\">\r\n        <UploadBoxController />\r\n      </section> */}\r\n    </React.Fragment>\r\n  );\r\n}\r\n"],"names":["ImageInfo","props","size","dispatch","useDispatch","userInfo","useSelector","state","sharedSlice","currentUserInformation","imageInputInfor","imageSlice","uploadingImageInfo","className","isShow","listImageLength","index","onClick","deleteCurrentImageFromQueue","type","placeholder","value","title","onChange","e","setUploadingImageInfo","target","src","avatarURL","alt","rows","description","Math","round","width","height","lastModified","UploadingBox","navigate","useNavigate","useState","listImage","setListImage","listImageData","setListImageData","listImageSaveData","setListSaveImage","listImageWH","setListImageWH","albumsInfo","setAlbumsInfo","currentSelectedImageIndex","setCurrentSelectedImageIndex","percentUpload","setPercentUpload","currentInputValue","useEffect","username","axios","API","params","withCredentials","then","data","console","log","albumList","catch","err","uploadListImageHandle","length","uploadImagesData","FormData","forEach","img","append","_id","JSON","stringify","entries","pair","config","headers","onUploadProgress","progressEvent","loaded","total","url","callAPISendImages","toast","removeIndex","prev","filter","percent","strokeWidth","strokeColor","name","id","map","albumName","onLoad","storage","dimension","x","naturalWidth","y","naturalHeight","generateTime","lastModifiedDate","toISOString","onLoadImage","htmlFor","style","display","document","querySelector","files","listFile","setLoadImageCount","fromIndex","file","reader","FileReader","imgData","onload","result","readAsDataURL","getListImage","multiple","accept","toString","ImageUploading"],"sourceRoot":""}