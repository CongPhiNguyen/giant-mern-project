{"version":3,"file":"static/js/14.34ce69d8.chunk.js","mappings":"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","sources":["authentication/pages/signup.js"],"sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"./signup.scss\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport API from \"../../config/API\";\r\nexport default function SignUp(props) {\r\n  const navigate = useNavigate();\r\n\r\n  const [isUsernameExist, setIsUsernameExist] = useState(false);\r\n  const [isEmailExist, setIsEmailExist] = useState(false);\r\n  const [isValidEmail, setIsValidEmail] = useState(true);\r\n  const [signUpState, setSignUpState] = useState(\"signup\");\r\n  const [countDownTime, setCountDownTime] = useState(0);\r\n  const [captchaVerify, setCaptchaVerify] = useState(false);\r\n  const [currentStep, setCurrentStep] = useState(1);\r\n  const [currentUsername, setCurrentUsername] = useState(\"\");\r\n\r\n  const pageRef = {\r\n    username: useRef(null),\r\n    email: useRef(null),\r\n    password: useRef(null),\r\n    otpRef: useRef(null),\r\n  };\r\n\r\n  const checkUsernameExist = (username) => {\r\n    axios\r\n      .post(API.PREFIX_URL + \"/api/user/exist-username\", {\r\n        username: username,\r\n      })\r\n      .then((data) => {\r\n        // console.log(data.data.find);\r\n        if (data.data.find === true) {\r\n          setIsUsernameExist(true);\r\n        } else {\r\n          setIsUsernameExist(false);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        // console.log(error.response.status === 404);\r\n        toast(error.message);\r\n        // if (error.response.status === 404) {\r\n        //   setIsUsernameExist(false);\r\n        // }\r\n      });\r\n  };\r\n\r\n  const checkValidEmailFormat = (email) => {\r\n    let checkRegex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n    if (checkRegex.test(email)) {\r\n      setIsValidEmail(true);\r\n    } else {\r\n      setIsValidEmail(false);\r\n    }\r\n  };\r\n\r\n  const checkEmailExist = (email) => {\r\n    axios\r\n      .post(API.PREFIX_URL + \"/api/user/exist-email\", {\r\n        email: email,\r\n      })\r\n      .then((data) => {\r\n        // console.log(data.data.find);\r\n        if (data.data.find === true) {\r\n          setIsEmailExist(true);\r\n        } else {\r\n          setIsEmailExist(false);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        // console.log(error.response.status === 404);\r\n        toast(error.message);\r\n        // if (error.response.status === 404) {\r\n        //   setIsUsernameExist(false);\r\n        // }\r\n      });\r\n  };\r\n\r\n  const signupUser = (username, email, password) => {\r\n    if (username.length == 0 || password.length == 0) {\r\n      toast(\"You must input all the information\");\r\n      return;\r\n    }\r\n    axios\r\n      .post(API.PREFIX_URL + \"/api/user/sign-up\", {\r\n        email: email,\r\n        username: username,\r\n        password: password,\r\n      })\r\n      .then((data) => {\r\n        // console.log(\"data\", data);\r\n        // sendOTP(username, email);\r\n        // setCurrentUsername(username);\r\n        // pageRef.username.current.value = \"\";\r\n        // setCurrentStep(2);\r\n        // toast(\"Signup successfully!\");\r\n        navigate(\"/sign-in\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        toast(\"Signup failed!\");\r\n      });\r\n  };\r\n\r\n  const sendOTP = (username, email) => {\r\n    axios\r\n      .post(API.PREFIX_URL + \"/api/otp/make-otp-sign-up\", {\r\n        username: username,\r\n        email: email,\r\n      })\r\n      .then((data) => {\r\n        if (data.data.success == true) {\r\n          let timeCountDown = Math.round(\r\n            60 - (new Date() - new Date(data.data.time).getTime()) / 1000\r\n          );\r\n          setCountDownTime(timeCountDown);\r\n          let timeID = setInterval(() => {\r\n            console.log(countDownTime);\r\n            setCountDownTime((prevVal) => {\r\n              if (prevVal == 0) clearInterval(timeID);\r\n              return prevVal - 1;\r\n            });\r\n          }, 1000);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        toast(error.message);\r\n      });\r\n  };\r\n\r\n  const emailCheckComp = () => {\r\n    if (isEmailExist) {\r\n      return <p className=\"error-input\">Email is exist</p>;\r\n    } else if (!isValidEmail) {\r\n      return <p className=\"error-input\">Email is not valid</p>;\r\n    } else return null;\r\n  };\r\n\r\n  const submitOTP = (username, otp) => {\r\n    // console.log(otp);\r\n    axios\r\n      .post(API.PREFIX_URL + \"/api/otp/check-otp\", {\r\n        username: username,\r\n        otp: otp,\r\n        time: new Date(),\r\n      })\r\n      .then((data) => {\r\n        console.log(data.data);\r\n        if (data.data.success == true) {\r\n          toast(\"Authentication OK\");\r\n          props.changeComponent(\"home\");\r\n        } else {\r\n          toast(data.data.message);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        toast(error.message);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-1-container\">\r\n      <div className=\"signup-container\">\r\n        <h1 className=\"signup-title\">SIGN UP</h1>\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"username\" className=\"input-title\">\r\n            Username\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"username\"\r\n            className=\"input-box\"\r\n            ref={pageRef.username}\r\n            onBlur={() => {\r\n              checkUsernameExist(pageRef.username.current.value);\r\n            }}\r\n          />\r\n        </div>\r\n        {isUsernameExist ? (\r\n          <p className=\"error-input\">Username is exist</p>\r\n        ) : null}\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"username\" className=\"input-title\">\r\n            Email\r\n          </label>\r\n          <input\r\n            type=\"email\"\r\n            id=\"email\"\r\n            className=\"input-box\"\r\n            ref={pageRef.email}\r\n            onBlur={() => {\r\n              checkEmailExist(pageRef.email.current.value);\r\n              checkValidEmailFormat(pageRef.email.current.value);\r\n            }}\r\n          />\r\n        </div>\r\n        {emailCheckComp()}\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"password\" className=\"input-title\">\r\n            Password\r\n          </label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            className=\"input-box\"\r\n            ref={pageRef.password}\r\n          />\r\n        </div>\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"password\" className=\"input-title\">\r\n            Confirm password\r\n          </label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"repeat-password\"\r\n            className=\"input-box\"\r\n            ref={pageRef.password}\r\n          />\r\n        </div>\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"otp\" className=\"input-title\">\r\n            OTP\r\n          </label>\r\n          <div className=\"input-concrete\">\r\n            <input\r\n              type=\"text\"\r\n              id=\"otp\"\r\n              className=\"input-box\"\r\n              ref={pageRef.otpRef}\r\n              defaultValue=\"\"\r\n            />\r\n            <button\r\n              className={\r\n                isUsernameExist && countDownTime <= 0 && captchaVerify\r\n                  ? \"send-otp-button\"\r\n                  : \"send-otp-button disable\"\r\n              }\r\n              onClick={() => {\r\n                if (isUsernameExist && countDownTime <= 0 && captchaVerify)\r\n                  sendOTP(pageRef.usernameRef.current.value);\r\n              }}\r\n            >\r\n              Send\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {countDownTime > 0 ? (\r\n          <p className=\"count-down\">OTP valid in {countDownTime} seconds</p>\r\n        ) : null}\r\n        <button\r\n          className=\"send-otp-button\"\r\n          onClick={() =>\r\n            submitOTP(currentUsername, pageRef.otpRef.current.value)\r\n          }\r\n        >\r\n          Submit\r\n        </button>\r\n        <button\r\n          className=\"login-button\"\r\n          onClick={() => {\r\n            signupUser(\r\n              pageRef.username.current.value,\r\n              pageRef.email.current.value,\r\n              pageRef.password.current.value\r\n            );\r\n          }}\r\n        >\r\n          SIGN UP\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["SignUp","props","navigate","useNavigate","useState","isUsernameExist","setIsUsernameExist","isEmailExist","setIsEmailExist","isValidEmail","setIsValidEmail","countDownTime","setCountDownTime","captchaVerify","currentUsername","pageRef","username","useRef","email","password","otpRef","className","htmlFor","type","id","ref","onBlur","current","value","axios","API","then","data","find","catch","error","toast","message","test","checkValidEmailFormat","defaultValue","onClick","usernameRef","success","timeCountDown","Math","round","Date","time","getTime","timeID","setInterval","console","log","prevVal","clearInterval","otp","changeComponent","length"],"sourceRoot":""}