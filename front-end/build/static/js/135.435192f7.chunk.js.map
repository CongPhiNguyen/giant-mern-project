{"version":3,"file":"static/js/135.435192f7.chunk.js","mappings":"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","sources":["album/components/Image/UploadingProgress.js","album/pages/Image/ProcessUploading.js","utilities/dayTime.js"],"sourcesContent":["import React from \"react\";\r\nimport \"./UploadingProgress.scss\";\r\nimport API from \"../../../config/API\";\r\nimport { toReadAbleDateTime } from \"../../../utilities/dayTime\";\r\nconst renderLinkImage = (imageRoots) => {\r\n  try {\r\n    if (imageRoots.length == 2)\r\n      return `${API.PREFIX_URL}/images/${imageRoots[0]}/${imageRoots[1]}_resize`;\r\n    else return \"\";\r\n  } catch (e) {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport default function UploadingProgress(props) {\r\n  console.log(\"UploadingProgress(props)\", props);\r\n  const uploadingInfo = props.uploadInfo;\r\n  return (\r\n    <div className=\"uploading-progress-container\">\r\n      <h3>{uploadingInfo.state == \"running\" ? \"Processing\" : \"Complete\"}</h3>\r\n      <p>Start time: {toReadAbleDateTime(uploadingInfo.createdAt)} </p>\r\n      <p>End time: {toReadAbleDateTime(uploadingInfo.updatedAt)} </p>\r\n      {uploadingInfo.imageInfoIDs.map((imageData, index) => {\r\n        console.log(imageData.id?.imageRoot);\r\n        return (\r\n          <div className=\"img-progress-container\" key={index}>\r\n            <img\r\n              src={renderLinkImage(imageData.id?.imageRoot)}\r\n              className=\"img-uploading\"\r\n              alt={imageData.id?.alt}\r\n            ></img>\r\n            <p className=\"image-title\">\r\n              {imageData.id?.imageName || \"Deleted\"}\r\n            </p>\r\n            <p className=\"progress\">\r\n              {imageData?.state ? \"Uploaded\" : \"Uploading....\"}\r\n            </p>\r\n            <p className=\"progress\">View more</p>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./ProcessUploading.scss\";\r\n\r\nimport axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setProcessingImages } from \"../../imageSlice\";\r\nimport UploadingProgress from \"../../components/Image/UploadingProgress\";\r\nimport API from \"../../../config/API\";\r\nconst uploadFilterEnum = {\r\n  PROCESSING: \"PROCESSING\",\r\n  PROCESSED: \"PROCESSED\",\r\n  ALL: \"ALL\",\r\n};\r\nexport default function ProcessUploading() {\r\n  const dispatch = useDispatch();\r\n\r\n  const [currentFilter, setCurrentFilter] = useState(\r\n    uploadFilterEnum.PROCESSING\r\n  );\r\n\r\n  const userInfo = useSelector(\r\n    (state) => state.sharedSlice.currentUserInformation\r\n  );\r\n  const processingImage = useSelector(\r\n    (state) => state.imageSlice.processingImagesInfo\r\n  );\r\n\r\n  let checkingProcessInterval;\r\n  useEffect(() => {\r\n    checkingProcessInterval = setInterval(() => {\r\n      callCheckProgress();\r\n    }, 1000);\r\n  }, [userInfo._id]);\r\n\r\n  const callCheckProgress = () => {\r\n    const checkForComplete = (allProcess) => {\r\n      if (allProcess.length === 0) return true;\r\n      else {\r\n        return allProcess.every((value) => {\r\n          return value.imageInfoIDs.every((image) => {\r\n            return image.state;\r\n          });\r\n        });\r\n      }\r\n    };\r\n    axios\r\n      .get(\r\n        API.PREFIX_URL + \"/api/image/check-progress-upload\",\r\n        { params: { userID: userInfo._id } },\r\n        { withCredentials: true }\r\n      )\r\n      .then((data) => {\r\n        if (data.data.success) {\r\n          console.log(\"data\", data);\r\n          // setCurrentData(data.data.data);\r\n          dispatch(setProcessingImages(data.data.data));\r\n          if (checkForComplete(data.data.data)) {\r\n            clearInterval(checkingProcessInterval);\r\n          }\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"err\", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"page-container\">\r\n      <button\r\n        onClick={() => {\r\n          setCurrentFilter(uploadFilterEnum.PROCESSING);\r\n        }}\r\n      >\r\n        {\" \"}\r\n        Processing\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          setCurrentFilter(uploadFilterEnum.PROCESSED);\r\n        }}\r\n      >\r\n        {\" \"}\r\n        Processed\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          setCurrentFilter(uploadFilterEnum.ALL);\r\n        }}\r\n      >\r\n        {\" \"}\r\n        All\r\n      </button>\r\n      <div className=\"content-container\">\r\n        {processingImage\r\n          .filter((value) => {\r\n            if (currentFilter === uploadFilterEnum.PROCESSING)\r\n              return value.state === \"running\";\r\n            else if (currentFilter === uploadFilterEnum.PROCESSED)\r\n              return value.state === \"processed\";\r\n            else if (currentFilter === uploadFilterEnum.ALL) return true;\r\n            else return false;\r\n          })\r\n          .map((value) => {\r\n            return <UploadingProgress uploadInfo={value} />;\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","const calculateTime = (timeString) => {\r\n  const postTime = new Date(timeString);\r\n  var diff = Math.abs(new Date() - postTime);\r\n  if (diff < 1000 * 60) {\r\n    return \"0 minutes ago\";\r\n  } else if (diff < 1000 * 60 * 60) {\r\n    return Math.floor(diff / 1000 / 60) + \" minutes ago\";\r\n  } else if (diff < 1000 * 60 * 60 * 24) {\r\n    return Math.floor(diff / 1000 / 60 / 60) + \" hours ago\";\r\n  } else if (diff < 1000 * 60 * 60 * 24 * 30) {\r\n    return Math.floor(diff / 1000 / 60 / 60 / 24) + \" days ago\";\r\n  } else if (diff < 1000 * 60 * 60 * 24 * 365) {\r\n    return Math.floor(diff / 1000 / 60 / 60 / 24 / 30) + \" months ago\";\r\n  } else {\r\n    return Math.floor(diff / 1000 / 60 / 60 / 24 / 365) + \" years ago\";\r\n  }\r\n};\r\n//TODO: Làm một hàm tính ngày và thời gian để sử dụng chung ở đây\r\nconst toReadAbleDate = (dateString) => {\r\n  const splitInfo = dateString.slice(0, 10).split(\"-\");\r\n  return splitInfo[2] + \"/\" + splitInfo[1] + \"/\" + splitInfo[0];\r\n};\r\n\r\nconst toReadAbleDateTime = (dateString) => {\r\n  const dateObject = new Date(dateString);\r\n  const splitInfo = dateString.slice(0, 10).split(\"-\");\r\n  return `${dateObject.getDate()}/${\r\n    dateObject.getMonth() + 1\r\n  }/${dateObject.getFullYear()} ${dateObject.getHours()}:${dateObject.getMinutes()}:${dateObject.getSeconds()}${(\r\n    dateObject.getMilliseconds() / 1000\r\n  )\r\n    .toString()\r\n    .slice(1)}`;\r\n};\r\n\r\nmodule.exports = {\r\n  toReadAbleDate,\r\n  calculateTime,\r\n  toReadAbleDateTime,\r\n};\r\n"],"names":["renderLinkImage","imageRoots","length","API","e","UploadingProgress","props","console","log","uploadingInfo","uploadInfo","className","state","toReadAbleDateTime","createdAt","updatedAt","imageInfoIDs","map","imageData","index","id","imageRoot","src","alt","imageName","uploadFilterEnum","ProcessUploading","checkingProcessInterval","dispatch","useDispatch","useState","currentFilter","setCurrentFilter","userInfo","useSelector","sharedSlice","currentUserInformation","processingImage","imageSlice","processingImagesInfo","useEffect","setInterval","callCheckProgress","_id","axios","params","userID","withCredentials","then","data","allProcess","success","setProcessingImages","every","value","image","clearInterval","catch","err","onClick","filter","module","exports","toReadAbleDate","dateString","splitInfo","slice","split","calculateTime","timeString","postTime","Date","diff","Math","abs","floor","dateObject","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","toString"],"sourceRoot":""}